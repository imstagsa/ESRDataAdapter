package net.digitaledge;

import java.util.Collection;
import java.util.List;
import java.util.Map;

import net.digitaledge.adapter.ESRAdapter;
import net.digitaledge.adapter.ESRAdapterImplementation;
import net.digitaledge.data.ESRDataSource;
import net.digitaledge.data.ESRDataSourceImpl;
import net.sf.jasperreports.data.DataAdapter;
import net.sf.jasperreports.data.DataAdapterService;
import net.sf.jasperreports.engine.JRDataset;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.design.JRDesignField;

import org.apache.log4j.Logger;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Composite;

import com.jaspersoft.studio.data.AWizardDataEditorComposite;
import com.jaspersoft.studio.data.DataAdapterDescriptor;
import com.jaspersoft.studio.data.DataAdapterEditor;
import com.jaspersoft.studio.data.IWizardDataEditorProvider;
import com.jaspersoft.studio.data.fields.IFieldsProvider;
import com.jaspersoft.studio.data.ui.WizardQueryEditorComposite;
import com.jaspersoft.studio.utils.jasper.JasperReportsConfiguration;


/**
 * This class provide information on the data adapter, like it's icon
 * and the classes to handle it, like editor and fields provider
 * 
 *
 */
public class ESRDataAdapterDescriptor extends DataAdapterDescriptor implements IFieldsProvider, IWizardDataEditorProvider {
	
	private static final Logger logger = Logger.getLogger(ESRDataAdapterDescriptor.class);
	
	/**
	 * Default serial version id
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * The data adapter
	 */
	private ESRAdapter dataAdapter = new ESRAdapterImplementation();
	
	/**
	 *  The fields provider for the data adapter
	 */
	private IFieldsProvider fieldsProvider;
	
	/**
	 * Return the data adapter
	 *
	 * @return the current data adapter
	 */
	@Override
	public ESRAdapter getDataAdapter() {
		return dataAdapter;
	}
	
	/**
	 * Save the reference to the data adapter inside the class
	 * 
	 * @param dataAdapter the data adapter to set
	 */
	@Override
	public void setDataAdapter(DataAdapter dataAdapter) {
		this.dataAdapter = (ESRAdapter) dataAdapter;
	}
	
	/**
	 * Return the editor to modify the data adapter settings
	 */
	@Override
	public DataAdapterEditor getEditor() {
		return new ESRDataAdapterEditor();
	}
	
	/**
	 * Return the icon for the data adapter or null
	 * if the requested icon is not available
	 */
	@Override
	public Image getIcon(int size) {
		if (size == 16) {
			return Activator.getDefault().getImage("images/elastic-16.png");
		}
		return null;
	}
	
	/**
	 * Return the list of fields provided by the data adapter with the current configuration. See the
	 * comments on the superclass for more detailed informations
	 * 
	 * @param con the data adapter service
	 * @param the current jasper reports configuration
	 * @param the dataset generated by the data adapter service, can be null depending on how
	 * is implemented the fields provider
	 * 
	 * @return a not null list of JRDesignFields
	 */
	 @Override
	public List<JRDesignField> getFields(DataAdapterService con,JasperReportsConfiguration jConfig, JRDataset reportDataset) throws JRException, UnsupportedOperationException {
		logger.info("getFields " + reportDataset.getQuery().getText());
		getFieldProvider();
		return fieldsProvider.getFields(con, jConfig, reportDataset);
	}
	
	/**
	 * If the fields provider was never instanced before then it is created
	 */
	private void getFieldProvider() {
		if (fieldsProvider == null)
			fieldsProvider = new ESRDataSourceImpl();
	}

	/**
	 * Return if the data adapter supports the method to get automatically the
	 * fields with the current configuration
	 * 
	 * @return true if the fields can be retrieved automatically with the getFields
	 * functions, false otherwise
	 */
	@Override
	public boolean supportsGetFieldsOperation(JasperReportsConfiguration jConfig) {
    	getFieldProvider();
		return fieldsProvider.supportsGetFieldsOperation(jConfig);
	}

	/**
	 * Return the wizard editor used to configure the data adapter during the new report wizard.
	 * Can return null if no custom wizard is provided
	 * 
	 * @return the controls to edit the adapter during the new report wizard or null
	 */
	@Override
	public AWizardDataEditorComposite createDataEditorComposite(Composite parent, WizardPage page) {
		return new WizardQueryEditorComposite(parent, page, this, ESRDataSource.QUERY_LANGUAGE);
	}
}